//{{ Памятка:
// Ctrl + K, Ctrl + C/U - закомментировать / раскомментировать
// Ctrl + K, Ctrl + F - форматирование кода
// Ctrl + M, Ctrl + H - Скрыть строчки кода
//}}

#include <iostream>

#include "SLAU.h"
#include "Matrix.h"
#include "MatrixInverse.h"

using namespace std;





int main() {

	setlocale(LC_ALL, "Russian"); // Позволяет корректно отображать кириллицу	

	int answer = 0;	// Хранит выбранное значение (задание)

	while (true) {

		cout << "Введите номер задания (от 1 до 5): ";

		if (!(cin >> answer) || answer < 1 || answer > 5) {
			cout << "Ошибка: введите целое число от 1 до 5." << endl;
			cin.clear(); // Очищаем флаг ошибки ввода
			cin.ignore(numeric_limits<streamsize>::max(), '\n'); // Очищаем буфер ввода
			continue; // Переходим к следующей итерации цикла
		}

		switch (answer) {
		case 1: {
			cout << "Выбрано задание 1.\nРешить СЛАУ методом Жордана-Гаусса, составив программу" << endl;

			int n = 5; // Размерность системы
			double matrix[MAXN][MAXN + 1] = {
				{-9.41, -8.58, 0.93, -9.09, 0.04, 4.18},
				{6.32, 4.39, 1.32, -7.73, 8.5, 8.14},
				{2.02, -2.23, -6.24, -3.25, 5.58, 9.22},
				{-1.71, 1.02, -3.58, 5.98, 4.58, 2.37},
				{0.63, -6.18, 3.5, 6.49, 1.66, -2.2}
			};

			double x[MAXN]; // Массив для хранения решений

			jordanGauss(matrix, x, n); // Вызов функции решения СЛАУ

			for (int i = 0; i < n; ++i) {
				cout << "x" << i + 1 << " = " << x[i] << endl; // Вывод решений
			}
			return 0;
		}
		case 2: {
			cout << "Выбрано задание 2. \nРешить СЛАУ методами простых итераций и Зейделя, составив программу." << endl;

			double a[N][N] = {
				{26, 2, 3, 2, 2},
				{4, 23, 3, 2, 1},
				{4, 2, 46, 1, 4},
				{5, 4, 2, 35, 4},
				{1, 5, 3, 5, 49}
			};
			double b[N] = { 45, 64, 152, 93, 79 };
			double x[N] = { 0 }; // Начальное приближение

			cout << endl;

			// Вызов метода простых итераций
			cout << "Решение СЛАУ методом простой итерации." << endl;
			simpleIterationsMethod(a, b, x);

			// Сброс начального приближения
			for (int i = 0; i < N; ++i) {
				x[i] = 0;
			}

			cout << endl;

			cout << "Решение СЛАУ методом Зейделя." << endl;
			// Вызов метода Зейделя
			seidelMethod(a, b, x);

			return 0;
		}
		case 3: {
			cout << "Выбрано задание 3.\nНайдите обратные к заданным матрицам методом присоединённой матрицы." << endl;			
			
			double A[NI][NI] = {
				{1, 1, 6, 2, 5},
				{6, 9, 2, 8, 3},
				{8, 9, 3, 3, 9},
				{6, 9, 3, 6, 5},
				{6, 5, 3, 5, 6}
			};

			double invA[NI][NI]; // Матрица для хранения результата - обратной матрицы
			InverseMatrix(A, invA); // Вызов функции для вычисления обратной матрицы

			// Вывод обратной матрицы на экран
			cout << "Обратная матрица:" << endl;
			DisplayMatrix(invA);
			return 0;
		}
		case 4:
			cout << "Выбрано задание 4." << endl;
			return 0;
		case 5:
			cout << "Выбрано задание 5." << endl;
			return 0;
		default:
			cout << "Задания под номером " << answer << " нет!" << endl;
		}
	}
	return 0;
}
